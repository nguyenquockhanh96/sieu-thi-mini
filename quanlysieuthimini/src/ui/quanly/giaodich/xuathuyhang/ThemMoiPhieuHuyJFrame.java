/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.quanly.giaodich.xuathuyhang;

import dao.DonViTinhDAO;
import dao.NhomHangDAO;
import dao.PhieuHuyChiTietDAO;
import dao.PhieuHuyDAO;
import dao.SanPhamDAO;
import helper.DateHelper;
import helper.DialogHelper;
import helper.ShareHelper;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.text.DecimalFormat;
import java.util.List;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import model.DonViTinh;
import model.NhomHang;
import model.PhieuHuyChiTiet;
import model.PhieuHuyHang;
import model.SanPham;

/**
 *
 * @author Admin
 */
public class ThemMoiPhieuHuyJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ThemMoiPhieuHuyJFrame
     */
    public ThemMoiPhieuHuyJFrame() {
        initComponents();
        inIt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btg_LoaiPhieuHuy = new javax.swing.ButtonGroup();
        pnl_CotTrai = new javax.swing.JPanel();
        tab_ChiTietPhieu = new javax.swing.JTabbedPane();
        pnl_DonHang = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_ChiTietPhieuHuy = new javax.swing.JTable();
        btn_CapNhatDanhSach = new javax.swing.JButton();
        btn_XoaDanhSach = new javax.swing.JButton();
        pnl_DanhSachSanPham = new javax.swing.JPanel();
        cmb_NhomHang = new javax.swing.JComboBox<>();
        txt_TimKiemSanPham = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_DanhSachSanPham = new javax.swing.JTable();
        pnl_CotPhai = new javax.swing.JPanel();
        btn_XuatHuy = new javax.swing.JButton();
        lbl_MaChungTu = new javax.swing.JLabel();
        txt_MaChungTu = new javax.swing.JTextField();
        lbl_NgayHuy = new javax.swing.JLabel();
        dat_NgayHuy = new com.toedter.calendar.JDateChooser();
        lbl_GhiChu = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txa_GhiChu = new javax.swing.JTextArea();
        lbl_TongGiaTri = new javax.swing.JLabel();
        txt_TongGiaTri = new javax.swing.JTextField();
        lbl_MaNhanVien = new javax.swing.JLabel();
        txt_MaNhanVien = new javax.swing.JTextField();
        lbl_TongSoLuong = new javax.swing.JLabel();
        txt_TongSoLuong = new javax.swing.JTextField();
        rad_HuyHetHSD = new javax.swing.JRadioButton();
        rad_HuyHangLoi = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("THÊM MỚI PHIẾU HUỶ");
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 768));

        pnl_CotTrai.setBackground(new java.awt.Color(255, 255, 255));

        tab_ChiTietPhieu.setBackground(new java.awt.Color(204, 255, 204));
        tab_ChiTietPhieu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        pnl_DonHang.setBackground(new java.awt.Color(204, 204, 255));
        pnl_DonHang.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, null, new java.awt.Color(153, 153, 153)));

        tbl_ChiTietPhieuHuy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tbl_ChiTietPhieuHuy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Mã SP", "Tên sản phẩm", "ĐVT", "Giá vốn", "SL huỷ", "Giá trị huỷ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_ChiTietPhieuHuy.setRowHeight(35);
        tbl_ChiTietPhieuHuy.setRowMargin(3);
        tbl_ChiTietPhieuHuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_ChiTietPhieuHuyMouseClicked(evt);
            }
        });
        tbl_ChiTietPhieuHuy.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbl_ChiTietPhieuHuyPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_ChiTietPhieuHuy);

        btn_CapNhatDanhSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refreshGioHang.png"))); // NOI18N
        btn_CapNhatDanhSach.setToolTipText("Cập nhật lại phiếu kiểm");
        btn_CapNhatDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_CapNhatDanhSachMouseEntered(evt);
            }
        });
        btn_CapNhatDanhSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CapNhatDanhSachActionPerformed(evt);
            }
        });

        btn_XoaDanhSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/removeGioHang.png"))); // NOI18N
        btn_XoaDanhSach.setToolTipText("Xoá các sản phẩm trong phiếu");
        btn_XoaDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_XoaDanhSachMouseEntered(evt);
            }
        });
        btn_XoaDanhSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_XoaDanhSachActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_DonHangLayout = new javax.swing.GroupLayout(pnl_DonHang);
        pnl_DonHang.setLayout(pnl_DonHangLayout);
        pnl_DonHangLayout.setHorizontalGroup(
            pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DonHangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DonHangLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_XoaDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_CapNhatDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnl_DonHangLayout.setVerticalGroup(
            pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DonHangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_CapNhatDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_XoaDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        tab_ChiTietPhieu.addTab("Chi tiết phiếu", pnl_DonHang);

        pnl_DanhSachSanPham.setBackground(new java.awt.Color(255, 255, 204));
        pnl_DanhSachSanPham.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 153, 153)));

        cmb_NhomHang.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmb_NhomHang.setMaximumRowCount(20);

        txt_TimKiemSanPham.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_TimKiemSanPham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_TimKiemSanPhamKeyPressed(evt);
            }
        });

        tbl_DanhSachSanPham.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tbl_DanhSachSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Mã sản phẩm", "Tên sản phẩm", "Tồn kho", "Giá vốn", "Giá bán"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_DanhSachSanPham.setRowHeight(35);
        tbl_DanhSachSanPham.setRowMargin(3);
        tbl_DanhSachSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_DanhSachSanPhamMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbl_DanhSachSanPham);

        javax.swing.GroupLayout pnl_DanhSachSanPhamLayout = new javax.swing.GroupLayout(pnl_DanhSachSanPham);
        pnl_DanhSachSanPham.setLayout(pnl_DanhSachSanPhamLayout);
        pnl_DanhSachSanPhamLayout.setHorizontalGroup(
            pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DanhSachSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_DanhSachSanPhamLayout.createSequentialGroup()
                        .addComponent(cmb_NhomHang, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_TimKiemSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnl_DanhSachSanPhamLayout.setVerticalGroup(
            pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DanhSachSanPhamLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmb_NhomHang)
                    .addComponent(txt_TimKiemSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tab_ChiTietPhieu.addTab("Danh sách sản phẩm", pnl_DanhSachSanPham);

        javax.swing.GroupLayout pnl_CotTraiLayout = new javax.swing.GroupLayout(pnl_CotTrai);
        pnl_CotTrai.setLayout(pnl_CotTraiLayout);
        pnl_CotTraiLayout.setHorizontalGroup(
            pnl_CotTraiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotTraiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_ChiTietPhieu)
                .addContainerGap())
        );
        pnl_CotTraiLayout.setVerticalGroup(
            pnl_CotTraiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotTraiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_ChiTietPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_XuatHuy.setBackground(new java.awt.Color(255, 51, 0));
        btn_XuatHuy.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_XuatHuy.setForeground(new java.awt.Color(255, 255, 255));
        btn_XuatHuy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconThungRac.png"))); // NOI18N
        btn_XuatHuy.setText("XUẤT HUỶ");
        btn_XuatHuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_XuatHuyMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_XuatHuyMouseExited(evt);
            }
        });
        btn_XuatHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_XuatHuyActionPerformed(evt);
            }
        });

        lbl_MaChungTu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_MaChungTu.setText("Mã chứng từ");

        txt_MaChungTu.setEditable(false);
        txt_MaChungTu.setBackground(new java.awt.Color(255, 255, 204));
        txt_MaChungTu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_MaChungTu.setFocusable(false);
        txt_MaChungTu.setRequestFocusEnabled(false);

        lbl_NgayHuy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_NgayHuy.setText("Ngày huỷ");

        dat_NgayHuy.setDateFormatString("dd-MM-yyyy");
        dat_NgayHuy.setEnabled(false);
        dat_NgayHuy.setFocusable(false);
        dat_NgayHuy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        dat_NgayHuy.setRequestFocusEnabled(false);

        lbl_GhiChu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_GhiChu.setText("Ghi chú");

        txa_GhiChu.setColumns(20);
        txa_GhiChu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txa_GhiChu.setRows(5);
        jScrollPane1.setViewportView(txa_GhiChu);

        lbl_TongGiaTri.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_TongGiaTri.setText("Tổng giá trị");

        txt_TongGiaTri.setEditable(false);
        txt_TongGiaTri.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_TongGiaTri.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_TongGiaTri.setText("0");

        lbl_MaNhanVien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_MaNhanVien.setText("Mã nhân viên");

        txt_MaNhanVien.setEditable(false);
        txt_MaNhanVien.setBackground(new java.awt.Color(255, 255, 204));
        txt_MaNhanVien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_MaNhanVien.setFocusable(false);
        txt_MaNhanVien.setRequestFocusEnabled(false);

        lbl_TongSoLuong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_TongSoLuong.setText("Tổng số lượng");

        txt_TongSoLuong.setEditable(false);
        txt_TongSoLuong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_TongSoLuong.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_TongSoLuong.setText("0");

        btg_LoaiPhieuHuy.add(rad_HuyHetHSD);
        rad_HuyHetHSD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rad_HuyHetHSD.setSelected(true);
        rad_HuyHetHSD.setText("Huỷ do hết HSD");

        btg_LoaiPhieuHuy.add(rad_HuyHangLoi);
        rad_HuyHangLoi.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rad_HuyHangLoi.setText("Huỷ do hàng lỗi");

        javax.swing.GroupLayout pnl_CotPhaiLayout = new javax.swing.GroupLayout(pnl_CotPhai);
        pnl_CotPhai.setLayout(pnl_CotPhaiLayout);
        pnl_CotPhaiLayout.setHorizontalGroup(
            pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txt_MaNhanVien, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_CotPhaiLayout.createSequentialGroup()
                            .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_CotPhaiLayout.createSequentialGroup()
                                    .addComponent(rad_HuyHetHSD)
                                    .addGap(48, 48, 48)
                                    .addComponent(rad_HuyHangLoi))
                                .addComponent(dat_NgayHuy, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_MaNhanVien, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbl_NgayHuy, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbl_MaChungTu, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_MaChungTu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addComponent(lbl_TongGiaTri)
                    .addComponent(lbl_GhiChu)
                    .addComponent(lbl_TongSoLuong)
                    .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(btn_XuatHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txt_TongGiaTri, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                        .addComponent(txt_TongSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)))
                .addGap(14, 14, 14))
        );
        pnl_CotPhaiLayout.setVerticalGroup(
            pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_MaNhanVien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_MaNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_MaChungTu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_MaChungTu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_NgayHuy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dat_NgayHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rad_HuyHetHSD)
                    .addComponent(rad_HuyHangLoi))
                .addGap(18, 18, 18)
                .addComponent(lbl_TongSoLuong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_TongSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_TongGiaTri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_TongGiaTri, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_GhiChu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btn_XuatHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnl_CotTrai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_CotPhai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_CotTrai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_CotPhai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_XuatHuyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_XuatHuyMouseEntered
        // TODO add your handling code here:
        btn_XuatHuy.setBackground(Color.yellow);
        btn_XuatHuy.setForeground(Color.blue);
        btn_XuatHuy.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_XuatHuyMouseEntered

    private void btn_XuatHuyMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_XuatHuyMouseExited
        // TODO add your handling code here:
        btn_XuatHuy.setBackground(new Color(255, 51, 0));
        btn_XuatHuy.setForeground(Color.white);
    }//GEN-LAST:event_btn_XuatHuyMouseExited

    private void btn_XuatHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_XuatHuyActionPerformed
        // TODO add your handling code here:
        themPhieuHuy();
    }//GEN-LAST:event_btn_XuatHuyActionPerformed

    private void tbl_ChiTietPhieuHuyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_ChiTietPhieuHuyMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            xoaSanPham();
        }
    }//GEN-LAST:event_tbl_ChiTietPhieuHuyMouseClicked

    private void tbl_ChiTietPhieuHuyPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbl_ChiTietPhieuHuyPropertyChange
        // TODO add your handling code here:
        nhapSoLuongHuy();
    }//GEN-LAST:event_tbl_ChiTietPhieuHuyPropertyChange

    private void txt_TimKiemSanPhamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_TimKiemSanPhamKeyPressed
        // TODO add your handling code here:
        timSanPham();
    }//GEN-LAST:event_txt_TimKiemSanPhamKeyPressed

    private void tbl_DanhSachSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_DanhSachSanPhamMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            themSanPham();
        }
    }//GEN-LAST:event_tbl_DanhSachSanPhamMouseClicked

    private void btn_CapNhatDanhSachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CapNhatDanhSachMouseEntered
        // TODO add your handling code here:
        btn_CapNhatDanhSach.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_CapNhatDanhSachMouseEntered

    private void btn_XoaDanhSachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_XoaDanhSachMouseEntered
        // TODO add your handling code here:
        btn_XoaDanhSach.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_XoaDanhSachMouseEntered

    private void btn_CapNhatDanhSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CapNhatDanhSachActionPerformed
        // TODO add your handling code here:
        nhapSoLuongHuy();
    }//GEN-LAST:event_btn_CapNhatDanhSachActionPerformed

    private void btn_XoaDanhSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_XoaDanhSachActionPerformed
        // TODO add your handling code here:
        xoaDanhSachHuy();
    }//GEN-LAST:event_btn_XoaDanhSachActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuHuyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuHuyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuHuyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuHuyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThemMoiPhieuHuyJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btg_LoaiPhieuHuy;
    private javax.swing.JButton btn_CapNhatDanhSach;
    private javax.swing.JButton btn_XoaDanhSach;
    private javax.swing.JButton btn_XuatHuy;
    private javax.swing.JComboBox<String> cmb_NhomHang;
    private com.toedter.calendar.JDateChooser dat_NgayHuy;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_GhiChu;
    private javax.swing.JLabel lbl_MaChungTu;
    private javax.swing.JLabel lbl_MaNhanVien;
    private javax.swing.JLabel lbl_NgayHuy;
    private javax.swing.JLabel lbl_TongGiaTri;
    private javax.swing.JLabel lbl_TongSoLuong;
    private javax.swing.JPanel pnl_CotPhai;
    private javax.swing.JPanel pnl_CotTrai;
    private javax.swing.JPanel pnl_DanhSachSanPham;
    private javax.swing.JPanel pnl_DonHang;
    private javax.swing.JRadioButton rad_HuyHangLoi;
    private javax.swing.JRadioButton rad_HuyHetHSD;
    private javax.swing.JTabbedPane tab_ChiTietPhieu;
    private javax.swing.JTable tbl_ChiTietPhieuHuy;
    private javax.swing.JTable tbl_DanhSachSanPham;
    private javax.swing.JTextArea txa_GhiChu;
    private javax.swing.JTextField txt_MaChungTu;
    private javax.swing.JTextField txt_MaNhanVien;
    private javax.swing.JTextField txt_TimKiemSanPham;
    private javax.swing.JTextField txt_TongGiaTri;
    private javax.swing.JTextField txt_TongSoLuong;
    // End of variables declaration//GEN-END:variables

    NhomHangDAO NhomHangDAO = new NhomHangDAO();
    SanPhamDAO SanPhamDAO = new SanPhamDAO();
    DonViTinhDAO DVTDAO = new DonViTinhDAO();
    PhieuHuyDAO PhieuHuyDAO = new PhieuHuyDAO();
    PhieuHuyChiTietDAO PHCTDAO = new PhieuHuyChiTietDAO();
    
    // Định dạng hiển thị số tiền:
    DecimalFormat dcf = new DecimalFormat("###,###,###.###");
    
    // Tạo treemap chứa sản phẩm và số lượng sản phẩm trong danh sách huỷ
    static TreeMap<SanPham, Integer> DSSP = new TreeMap<>();
    
    /*
     * Hàm khởi tạo các giá trị ban đầu cho JFrame
     */
    void inIt() {
        this.setSize(1366, 768);
        this.setMinimumSize(new Dimension(1366, 768));
        this.setMaximumSize(new Dimension(1366, 768));
        setResizable(false);
        setLocationRelativeTo(null);
        doNhomHang();
        doDanhSachSanPham();
        doThongTin();
    }
    
    /*
     * Hàm đổ các thông tin mặc định 
     */
    void doThongTin() {
        try {
            // khởi tạo ngày huỷ (là ngày hiện tại)
            dat_NgayHuy.setDate(DateHelper.now());
            // đổ mã nhân viên đang thao tác vào textfield
            txt_MaNhanVien.setText(ShareHelper.NguoiDung.getTenDangNhap());
            // khởi tạo mã phiếu kiểm
            int demPhieu = PhieuHuyDAO.demTongPhieu();
            String MaPhieuHuy = "PH" + (demPhieu+1);
            txt_MaChungTu.setText(MaPhieuHuy);
        } catch (Exception e) {
            DialogHelper.alert(this, "Có lỗi: " + e.toString());
        }
    }
    
    /*
     * Hàm này đổ danh sách nhóm hàng vào combobox ở tab DanhSachSanPham
     */
    void doNhomHang() {
        DefaultComboBoxModel dcm = (DefaultComboBoxModel) cmb_NhomHang.getModel();
        dcm.removeAllElements();
        try {
            List<NhomHang> ListNH = NhomHangDAO.select();
            dcm.addElement("Tất cả");
            for (NhomHang NH : ListNH) {
                dcm.addElement(NH);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi truy vấn: " + e.toString());
        }
    }
    
    /*
     * Hàm này đổ danh sách sản phẩm vào tab Danh Sách Sản Phẩm
     */
    void doDanhSachSanPham() {
        try {
            List<SanPham> ListSP = SanPhamDAO.select();
            doDuLieuSanPham(ListSP);
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi truy vấn: " + e.toString());
        }
    }
    
    /*
     * Hàm này tìm sản phẩm ở tab DANH SÁCH SẢN PHẨM
     */
    void timSanPham() {
        List<SanPham> list;
        // get tên nhóm hàng và mã nhóm hàng
        String TuyChonNhomHang = cmb_NhomHang.getSelectedItem().toString();
        // get chuỗi tìm kiếm
        String ChuoiTimKiem = txt_TimKiemSanPham.getText();
        // nếu chuỗi rỗng thì đổ tất cả sản phẩm theo mã nhóm
        if (ChuoiTimKiem.isEmpty()) {
            // nếu tên nhóm hàng là TẤT CẢ thì truy vấn tất cả
            if (TuyChonNhomHang.equalsIgnoreCase("Tất cả")) {
                try {
                    list = SanPhamDAO.select();
                    doDuLieuSanPham(list);
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            } else {
                try {
                    NhomHang NhomHang = NhomHangDAO.timMaNhom(TuyChonNhomHang);
                    String MaNhom = NhomHang.getMaNhomHang();
                    list = SanPhamDAO.timTheoMaNhom(MaNhom);
                    doDuLieuSanPham(list);
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            }
        } else {
            // nếu tên nhóm hàng là TẤT CẢ thì truy vấn tất cả
            if (TuyChonNhomHang.equalsIgnoreCase("Tất cả")) {
                try {
                    list = SanPhamDAO.timSanPhamTheoTen(ChuoiTimKiem);
                    doDuLieuSanPham(list);
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            } else {
                try {
                    NhomHang NhomHang = NhomHangDAO.timMaNhom(TuyChonNhomHang);
                    String MaNhom = NhomHang.getMaNhomHang();
                    list = SanPhamDAO.timKetHopNhomHang(ChuoiTimKiem, MaNhom);
                    if (list != null) {
                        doDuLieuSanPham(list);
                    }
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            }
        }
    }
    
    /*
     * Hàm thao tác đổ dữ liệu lên bảng Sản Phẩm
     */
    void doDuLieuSanPham(List<SanPham> list) {
        DefaultTableModel dtm = (DefaultTableModel) tbl_DanhSachSanPham.getModel();
        dtm.setRowCount(0);
        int STT = 0;
        for (SanPham sp : list) {
            STT++;
            Object[] row = {
                STT,
                sp.getMaSanPham(),
                sp.getTenSanPham(),
                sp.getTonKho(),
                dcf.format(sp.getGiaVon()),
                dcf.format(sp.getGiaBan())
            };
            dtm.addRow(row);
        }
    }
    
    /*
     * Hàm thêm sản phẩm ở tbl_DSSP vào tab chi tiết phiếu huỷ
     */
    void themSanPham() {
        int index = tbl_DanhSachSanPham.getSelectedRow();
        String MaSP = tbl_DanhSachSanPham.getValueAt(index, 1).toString();
        try {
            SanPham SP = SanPhamDAO.timTheoMaSP(MaSP);
            // check trong TreeMap có SP chưa, nếu có thì báo lỗi, chưa thì add vào
            if (DSSP.containsKey(SP)) 
                DialogHelper.alert(this, "Sản phẩm đã có trong danh sách huỷ");
            else {
                DSSP.put(SP, 0);
                capnhatDanhSachHuy();
                tab_ChiTietPhieu.setSelectedIndex(0);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Có lỗi: " + e.toString());
        }
    }
    
    /*
     * Hàm cập nhật danh sách huỷ
     */
    void capnhatDanhSachHuy() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_ChiTietPhieuHuy.getModel();
        dtm.setRowCount(0);
        int STT = 1;
        for (SanPham SP : DSSP.keySet()) {
            DonViTinh DVT = DVTDAO.timTheoMa(SP.getMaDVT());
            Object[] row = {STT++,
                            SP.getMaSanPham(),
                            SP.getTenSanPham(),
                            DVT.getMoTa(),
                            dcf.format(SP.getGiaVon()),
                            DSSP.get(SP),
                            dcf.format(DSSP.get(SP)*SP.getGiaVon())
                            };
            dtm.addRow(row);
        }
    }
    
    /*
     * Hàm nhập số lượng cần huỷ vào bảng
           sau khi nhập thì cập nhật lại bảng
     */
    void nhapSoLuongHuy() {
        try {
            int index = tbl_ChiTietPhieuHuy.getEditingRow();
            if (index >= 0) {
                String MaSP = tbl_ChiTietPhieuHuy.getValueAt(index, 1).toString();
                SanPham SP = SanPhamDAO.timTheoMaSP(MaSP);
                int SLHuy = Integer.parseInt(tbl_ChiTietPhieuHuy.getValueAt(index, 5)+"");
                DSSP.put(SP, SLHuy);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi nhập liệu");
        }
        finally {
            capnhatDanhSachHuy();
            tinhTongSoLuongHuy();
            tinhTongGiaTriHuy();
        }
    }
    
    /*
     * Hàm cập nhật tổng số lượng huỷ
     */
    void tinhTongSoLuongHuy() {
        int TongSLHuy = 0;
        for (SanPham SP : DSSP.keySet()) {
            TongSLHuy += DSSP.get(SP);
        }
        txt_TongSoLuong.setText(TongSLHuy+"");
    }
    
    /*
     * Hàm cập nhật tổng giá trị huỷ
     */
    void tinhTongGiaTriHuy() {
        float TongGTHuy = 0;
        for (SanPham SP : DSSP.keySet()) {
            TongGTHuy += DSSP.get(SP)*SP.getGiaVon();
        }
        txt_TongGiaTri.setText(TongGTHuy+"");
    }
    
    /*
     * Hàm xoá hết sản phẩm trong danh sách huỷ
     */ 
    void xoaDanhSachHuy() {
        DSSP.clear();
        capnhatDanhSachHuy();
        tinhTongGiaTriHuy();
        tinhTongSoLuongHuy();
    }
    
    /*
     * Hàm check ghi chú: không được để trống, tối thiểu phải đủ 3 ký tự
     */
    boolean kiemGhiChu() {
        if(txa_GhiChu.getText().length() < 3)
            return false;
        return true;
    }
    
    /*
     * Hàm kiểm tra dssp 
           - có null hay không, null thì không được phép hoàn tất
     */
    boolean kiemDSSP() {
        return !DSSP.isEmpty();
    }
    
    /*
     * Hàm lưu phiếu huỷ và cân bằng kho
     */
    void themPhieuHuy() {
        if (xetDangNhap() && kiemGhiChu() && kiemDSSP() && kiemSoLuongThucTe()) {
            PhieuHuyHang PH = taoPhieuHuy();
            try {
                int rs = PhieuHuyDAO.themPhieuHuy(PH);
                if (rs > 0) {
                    themPHCT(PH);
                    canbangTonKho();
                    DialogHelper.alert(this, "Đã thêm phiếu huỷ và cân bằng kho");
                    xoaDanhSachHuy();
                    if (capnhatFrameXuatHuy()) {
                        this.dispose();
                        new XuatHuyHangJFrame().setVisible(true);
                    }
                }
                else
                    DialogHelper.alert(this, "Cân bằng thất bại");
            } catch (Exception e) {
                DialogHelper.alert(this, "Có lỗi: " + e.toString());
            }
        }
        else {
            DialogHelper.alert(this, "Kiểm tra lại các thông tin");
        }
    }
    
    /*
     * Hàm kiểm tra số lượng thực tế của SP trước khi huỷ
           nếu có SP có SL < 1 thì không cho huỷ
     */
    boolean kiemSoLuongThucTe() {
        for (SanPham SP : DSSP.keySet()) {
            if (DSSP.get(SP) < 1)
                return false;
        }
        return true;
    }
    
    /*
     * Hàm cập nhật lại tồn kho của SP (cân bằng kho hàng)
     */
    void canbangTonKho() {
        for (SanPham SP : DSSP.keySet()) {
            int TonKhoMoi = SP.getTonKho() - DSSP.get(SP);
            SanPhamDAO.capnhatTonKho(SP.getMaSanPham(), TonKhoMoi);
        }
    }

    /*
     * Hàm thêm PHCT
     */
    void themPHCT(PhieuHuyHang PH) {
        for (SanPham SP : DSSP.keySet()) {
            DonViTinh DVT = DVTDAO.timTheoMa(SP.getMaDVT());
            PhieuHuyChiTiet PHCT = new PhieuHuyChiTiet();
            PHCT.setMaPhieuHuy(PH.getMaPhieuHuy());
            PHCT.setMaSanPham(SP.getMaSanPham());
            PHCT.setDVT(DVT.getMoTa());
            PHCT.setSoLuong(DSSP.get(SP));
            PHCT.setGiaVon(SP.getGiaVon());
            PHCT.setThanhTien(SP.getGiaVon()*DSSP.get(SP));
            PHCTDAO.themPHCT(PHCT);
        }
    }

    /*
     * Hàm kiểm tra đăng nhập
     */
    boolean xetDangNhap() {
        if (ShareHelper.NguoiDung != null)
            return true;
        return false;
    }
    
    /*
     * Hàm tạo model Phiếu Huỷ Hàng
     */
    PhieuHuyHang taoPhieuHuy() {
        PhieuHuyHang PH = new PhieuHuyHang();
        PH.setMaPhieuHuy(txt_MaChungTu.getText().trim());
        PH.setLoaiPhieuHuy(rad_HuyHetHSD.isSelected() ? 0 : 1);
        PH.setMaNhanVien(txt_MaNhanVien.getText().trim());
        PH.setNgayHuy(dat_NgayHuy.getDate());
        PH.setSoLuongHuy(Integer.parseInt(txt_TongSoLuong.getText()));
        PH.setGiaTriHuy(Float.parseFloat(txt_TongGiaTri.getText()));
        PH.setGhiChu(txa_GhiChu.getText());
        PH.setDSSP(DSSP);
        return PH;
    }
    
    /*
     * Hàm thoát frame thêm mới và cập nhật lại frame xuất huỷ hàng
     */
    boolean capnhatFrameXuatHuy(){
        Frame[] listFrames = Frame.getFrames();
        for (Frame fr : listFrames) {
            String tenFrame = fr.getClass().getName();
            if (tenFrame.equalsIgnoreCase("ui.quanly.giaodich.xuathuyhang.XuatHuyHangJFrame")) {
                fr.dispose();
                return true;
            }
        }
        return false;
    }
    
    /*
     * Hàm xoá sản phẩm trong danh sách huỷ khi click chọn
     */
    void xoaSanPham() {
        int index = tbl_ChiTietPhieuHuy.getSelectedRow();
        String MaSP = tbl_ChiTietPhieuHuy.getValueAt(index, 1).toString();
        try {
            SanPham SP = SanPhamDAO.timTheoMaSP(MaSP);
            if (DialogHelper.confirm(this, "Xoá sản phẩm " + MaSP + "khỏi danh sách huỷ?")) {
                DSSP.remove(SP);
                capnhatDanhSachHuy();
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Có lỗi: " + e.toString());
        }
    }
    
}